# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
"$schema" = "https://yazi-rs.github.io/schemas/keymap.json"

[manager]
prepend_keymap = [
	{ on = "l", run = 'plugin smart-enter' },
	{ on = "<Enter>", run = 'plugin smart-enter' },
	{ on = "S", run = 'shell "$SHELL" --block --confirm' },
	{ on = [
		"'",
		"a",
	], run = "plugin yamb --args=save", desc = "Add bookmark" },
	{ on = [
		"'",
		"'",
	], run = "plugin yamb --args=jump_by_fzf", desc = "Jump bookmark by fzf" },
	{ on = [
		"'",
		"r",
	], run = "plugin yamb --args=delete_by_key", desc = "Delete bookmark by key" },
	{ on = [
		"P",
	], run = "spot", desc = "Open spotter" },
	{ on = [
		"c",
		"a",
	], run = "plugin compress", desc = "Archive selected files" },
]

keymap = [
	{ on = "<esc>", run = "escape", desc = "exit visual mode, clear selected, or cancel search" },
	{ on = "<c-[>", run = "escape", desc = "exit visual mode, clear selected, or cancel search" },
	#{ on = "q", run = "quit", desc = "exit the process" },
	{ on = "q", run = "close", desc = "close the current tab, or quit if it is last tab" },
	{ on = "Q", run = "quit --no-cwd-file", desc = "exit the process without writing cwd-file" },
	{ on = "<c-z>", run = "suspend", desc = "suspend the process" },

	{ on = "r", run = "reload", desc = "refresh the current directory" },

	# hopping
	{ on = "k", run = "arrow -1", desc = "move cursor up" },
	{ on = "j", run = "arrow 1", desc = "move cursor down" },

	{ on = "<up>", run = "arrow -1", desc = "move cursor up" },
	{ on = "<down>", run = "arrow 1", desc = "move cursor down" },

	{ on = "<c-u>", run = "arrow -50%", desc = "move cursor up half page" },
	{ on = "<c-e>", run = "arrow 50%", desc = "move cursor down half page" },

	{ on = "<c-b>", run = "arrow -50%", desc = "move cursor up half page" },
	{ on = "<c-f>", run = "arrow 50%", desc = "move cursor down half page" },

	{ on = "<s-pageup>", run = "arrow -50%", desc = "move cursor up half page" },
	{ on = "<s-pagedown>", run = "arrow 50%", desc = "move cursor down half page" },
	{ on = "<pageup>", run = "arrow -100%", desc = "move cursor up one page" },
	{ on = "<pagedown>", run = "arrow 100%", desc = "move cursor down one page" },

	{ on = ["g", "g"], run = "arrow -99999999", desc = "move cursor to the top" },
	{ on = "G", run = "arrow 99999999", desc = "move cursor to the bottom" },

	# navigation
	{ on = "h", run = "leave", desc = "go back to the parent directory" },

	{ on = "<left>", run = "leave", desc = "go back to the parent directory" },
	{ on = "<right>", run = "enter", desc = "enter the child directory" },

	{ on = "h", run = "back", desc = "go back to the previous directory" },
	{ on = "l", run = "forward", desc = "go forward to the next directory" },

	# selection
	{ on = "<space>", run = ["toggle", "arrow 1"], desc = "toggle the current selection state" },
	{ on = "v", run = "toggle_all", desc = "enter visual mode (selection mode)" },
	{ on = "v", run = "visual_mode --unset", desc = "enter visual mode (unset mode)" },
	# { on = "<c-a>", run = "select_all --state=true", desc = "select all files" },
	# { on = "<c-r>", run = "select_all --state=none", desc = "inverse selection of all files" },

	# find
	{ on = "<c-p>", run = "plugin fzf", desc = "jump to a directory or reveal a file using fzf" },
	{ on = ["z", "o"], run = "plugin zoxide", desc = "jump to a directory using zoxide" },
	# { on = "f", run = "search fd", desc = "search files by name using fd" },
	{ on = "f", run = "search rg", desc = "search files by content using ripgrep" },
	{ on = "<c-s>", run = "escape --search", desc = "cancel the ongoing search" },
	{ on = "f", run = "filter --smart", desc = "filter files" },
	{ on = "/", run = "find --smart", desc = "find next file" },
	{ on = "?", run = "find --previous --smart", desc = "find previous file" },
	{ on = "n", run = "find_arrow", desc = "go to the next found" },
	{ on = "n", run = "find_arrow --previous", desc = "go to the previous found" },

	# shell
	{ on = ";", run = "shell --interactive", desc = "run a shell command" },
	{ on = ":", run = "shell --block --interactive", desc = "run a shell command (block until finishes)" },

	# hidden files
	{ on = ".", run = "hidden toggle", desc = "toggle the visibility of hidden files" },

	# open
	# { on = "r", run = "open --interactive", desc = "open selected files interactively" },

	# create
	{ on = "a", run = "create", desc = "create a file (ends with / for directories)" },

	# rename
	{ on = "R", run = "rename --empty=all", desc = "rename selected file(s)" },
	{ on = ["e", "a"], run = "rename --cursor=start", desc = "rename selected file(s)" },
	{ on = ["e", "e"], run = "rename --cursor=before_ext", desc = "rename selected file(s)" },
	{ on = ["e", "t"], run = "rename --cursor=end", desc = "rename selected file(s)" },

	# operation: d
	{ on = ["d", "d"], run = "yank --cut", desc = "yank selected files (cut)" },
	# { on = ["d"], run = "remove", desc = "trash selected files" },
	{ on = ["d", "D"], run = "remove --permanently", desc = "permanently delete selected files" },

	# operation: y
	{ on = ["y", "y"], run = "yank", desc = "yank selected files (copy)" },
	{ on = ["y", "p"], run = "copy path", desc = "copy the file path" },
	{ on = ["y", "d"], run = "copy dirname", desc = "copy the directory path" },
	{ on = ["y", "f"], run = "copy filename", desc = "copy the filename" },
	{ on = ["y", "n"], run = "copy name_without_ext", desc = "copy the filename without extension" },
	{ on = ["y", "c"], run = "unyank", desc = "cancel the yank status" },

	# operation: p
	{ on = ["p", "p"], run = "paste", desc = "paste yanked files" },
	{ on = ["p", "P"], run = "paste --force", desc = "paste yanked files (overwrite if the destination exists)" },
	{ on = ["p", "l"], run = "link", desc = "symlink the absolute path of yanked files" },
	{ on = ["p", "l"], run = "link --relative", desc = "symlink the relative path of yanked files" },
	{ on = ["p", "h"], run = "hardlink", desc = "hardlink yanked files" },

	# linemode
	{ on = ["m", "s"], run = "linemode size", desc = "set linemode to size" },
	{ on = ["m", "p"], run = "linemode perm", desc = "set linemode to permissions" },
	{ on = ["m", "c"], run = "linemode btime", desc = "set linemode to btime" },
	{ on = ["m", "m"], run = "linemode mtime", desc = "set linemode to mtime" },
	{ on = ["m", "o"], run = "linemode owner", desc = "set linemode to owner" },
	{ on = ["m", "n"], run = "linemode none", desc = "set linemode to none" },


	# sorting
	{ on = ["o", "m"], run = ["sort mtime --reverse=no", "linemode mtime"], desc = "sort by modified time" },
	{ on = ["o", "M"], run = ["sort mtime --reverse", "linemode mtime"], desc = "sort by modified time (reverse)" },
	{ on = ["o", "c"], run = ["sort btime --reverse=no", "linemode btime"], desc = "sort by created time" },
	{ on = ["o", "C"], run = ["sort btime --reverse", "linemode btime"], desc = "sort by created time (reverse)" },
	{ on = ["o", "e"], run = "sort extension --reverse=no", desc = "sort by extension" },
	{ on = ["o", "E"], run = "sort extension --reverse", desc = "sort by extension (reverse)" },
	{ on = ["o", "a"], run = "sort alphabetical --reverse=no", desc = "sort alphabetically" },
	{ on = ["o", "A"], run = "sort alphabetical --reverse", desc = "sort alphabetically (reverse)" }, { on = ["o", "n"], run = "sort natural --reverse=no", desc = "sort naturally" },
	{ on = ["o", "n"], run = "sort natural --reverse", desc = "sort naturally (reverse)" },
	{ on = ["o", "s"], run = ["sort size --reverse=no", "linemode size"], desc = "sort by size" },
	{ on = ["o", "S"], run = ["sort size --reverse", "linemode size"], desc = "sort by size (reverse)" },

	# goto
	{ on = ["g", "r"], run = "cd /", desc = "go to the root directory" },
	{ on = ["g", "h"], run = "cd ~", desc = "go to the home directory" },
	# { on = ["g", "c"], run = "cd ~/.config", desc = "go to the config directory" },
	{ on = ["g", "<space>"], run = "cd --interactive", desc = "go to a directory interactively" },

	# tabs
	{ on = "t", run = "tab_create --current", desc = "create a new tab with cwd" },
	{ on = "[", run = "tab_switch -1 --relative", desc = "switch to the previous tab" },
	{ on = "]", run = "tab_switch 1 --relative", desc = "switch to the next tab" },
	#{ on = ["t", ""], run = "tab_swap -1", desc = "swap current tab with previous tab" },
	#{ on = ["}"], run = "tab_swap 1", desc = "swap current tab with next tab" },
	{ on = "1", run = "tab_switch 0", desc = "switch to the first tab" },
	{ on = "2", run = "tab_switch 1", desc = "switch to the second tab" },
	{ on = "3", run = "tab_switch 2", desc = "switch to the third tab" },
	{ on = "4", run = "tab_switch 3", desc = "switch to the fourth tab" },
	{ on = "5", run = "tab_switch 4", desc = "switch to the fifth tab" },
	{ on = "6", run = "tab_switch 5", desc = "switch to the sixth tab" },
	{ on = "7", run = "tab_switch 6", desc = "switch to the seventh tab" },
	{ on = "8", run = "tab_switch 7", desc = "switch to the eighth tab" },
	{ on = "9", run = "tab_switch 8", desc = "switch to the ninth tab" },

	# tasks
	{ on = "w", run = "tasks_show", desc = "show task manager" },

	# help
	{ on = "~", run = "help", desc = "open help" },
	{ on = "<f1>", run = "help", desc = "open help" },
]
